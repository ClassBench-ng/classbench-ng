#!/usr/bin/env ruby

require_relative "lib/classbench"

require "pp"
require "docopt"
doc = <<DOCOPT
Classbench utility
  Firewall/openflow rule generator.

Usage:
  #{__FILE__} analyse FILE
  #{__FILE__} generate v4 <seed> [--count=<n>] [--db-generator=<path>]
  #{__FILE__} generate v6 <seed> [--count=<n>] [--db-generator=<path>]
  #{__FILE__} generate of <seed> [--count=<n>] [--db-generator=<path>]
  #{__FILE__} -h | --help

Options:
  --db-generator=<path>     Path to binary of original db_generator [default: ./vendor/db_generator/db_generator]
  --count=<n>               Count of rules to generate [default: 100]
  -h --help                 Show this screen.

Analyser accept's as input ovs-ofctl dump.
Fields extracted from dump are:
	- dl_dst, dl_src, dl_type, (dl_vlan, dl_vlan_pcp,)
	- eth_type, in_port,
	- nw_dst, nw_proto, nw_src, nw_tos,
	- tp_dst, tp_src
Output is original Classbench seed
	with openflow YAML structure as last section.

Generator accept's Classbench seed with openflow section.
Output's one rule per line in format "attribute=value", joined by ", ".

DOCOPT
# Add the following line to the DOCOPT's "Options" pattern to show support of
# "version" parameter.
#  #{__FILE__} version

begin
	opts = Docopt::docopt(doc)
	if opts["analyse"]
		Classbench::analyse(opts["FILE"])
	elsif opts["generate"]
		if opts["v4"]
			Classbench::generate("v4", opts["<seed>"], (opts["--count"].to_i), opts["--db-generator"])
		elsif opts["v6"]
			Classbench::generate("v6", opts["<seed>"], (opts["--count"].to_i), opts["--db-generator"])
		elsif opts["of"]
			Classbench::generate("of", opts["<seed>"], (opts["--count"].to_i), opts["--db-generator"])
		end
	elsif opts["version"]
		puts "Version: #{Classbench::VERSION}"
	end

	rescue Docopt::Exit => e
		STDERR.puts e.message
end
